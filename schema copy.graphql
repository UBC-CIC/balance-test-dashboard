type Patient {
  patient_id: String!
  name: String
  email: String
}

type CareProvider {
  care_provider_id: String!
  email: String
}

type PatientCareprovider {
  patient_id: String!
  care_provider_id: String!
}

type PatientTest {
  patient_id: String!
  test_type: String!
}

type Test {
  test_type: String!
  instructions: String
  duration_in_seconds: Int
}

type Query {
  # getters
  getCareproviderById(care_provider_id: String!): CareProvider
  getPatientById(patient_id: String!): Patient
  getPatientsForCareprovider(care_provider_id: String!): [Patient]
  getAllPatients: [Patient]
  getTestEvents(
    patient_id: String!
    test_type: String
    from_time: String
    to_time: String
    sort: SortDirection
    count: Int
  ): [TestEvent]
  getPatientAssignedTests(patient_id: String!): [Test]
  getAllAvailableTests: [Test]

  # analytics
  getWeeklyAverageBalanceScore(patientId: String!): Int

  # measurements
  getMeasurementRange(
    test_event_id: String!
    test_type: String!
    from_date: String
    to_date: String
  ): String

  getMeasurementData(test_event_id: String!, test_type: String!): String
}

type Mutation {
  createPatient(patient_id: String!, email: String, name: String): Patient
  createCareProvider(care_provider_id: String!, email: String!): CareProvider
  addPatientToCareProvider(
    care_provider_id: String!
    patient_id: String!
  ): PatientCareprovider
  assignTestToPatient(patient_id: String!, test_type: String!): [PatientTest]
  putTestResult(
    test_event_id: String!
    patient_id: String!
    test_type: String!
    doctor_score: Int
    start_time: String!
    end_time: String!
    notes: String
  ): TestEvent
  putBalanceScore(test_event_id: String!, balance_score: Int!): TestEvent
  addTestType(
    test_type: String!
    instructions: String
    duration_in_seconds: Int
  ): Test
}

type TestEvent {
  test_event_id: String!
  patient_id: String!
  test_type: String!
  if_completed: Boolean!
  balance_score: Int
  doctor_score: Int
  notes: String
  start_time: String
  end_time: String
}

enum SortDirection {
  asc
  desc
}

schema {
  query: Query
  mutation: Mutation
}
