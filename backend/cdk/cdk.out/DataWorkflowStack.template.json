{
 "Resources": {
  "balancetestdatastoragebucketD25B585E": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": "balancetest-datastorage-bucket",
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "BucketOwnerEnforced"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/balancetest-datastorage-bucket/Resource"
   }
  },
  "balancetestdatastoragebucketNotificationsC1B244D2": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "balancetestdatastoragebucketD25B585E"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".json"
          },
          {
           "Name": "prefix",
           "Value": "private/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "BalanceTestconvertjsontoparquetandcsvF6E7C454",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "balancetestdatastoragebucketAllowBucketNotificationsToDataWorkflowStackBalanceTestconvertjsontoparquetandcsv0BBF7125DA849D3F"
   ],
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/balancetest-datastorage-bucket/Notifications/Resource"
   }
  },
  "balancetestdatastoragebucketAllowBucketNotificationsToDataWorkflowStackBalanceTestconvertjsontoparquetandcsv0BBF7125DA849D3F": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "BalanceTestconvertjsontoparquetandcsvF6E7C454",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": "684904187051",
    "SourceArn": {
     "Fn::GetAtt": [
      "balancetestdatastoragebucketD25B585E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/balancetest-datastorage-bucket/AllowBucketNotificationsToDataWorkflowStackBalanceTestconvertjsontoparquetandcsv0BBF7125"
   }
  },
  "BalanceTestS3LambdaTriggerLogs612C9428": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/lambda/BalanceTest-convert-json-to-parquet-and-csv",
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-S3LambdaTrigger-Logs/Resource"
   }
  },
  "BalanceTestS3LambdaTriggerRole83B886E8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role gives access to appropriate S3 functions needed for file conversions and logging for Lambda.",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "s3:GetObject",
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "balancetestdatastoragebucketD25B585E",
              "Arn"
             ]
            },
            "/private/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "BalanceTestS3LambdaTriggerLogs612C9428",
           "Arn"
          ]
         }
        },
        {
         "Action": "s3:PutObject",
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "balancetestdatastoragebucketD25B585E",
              "Arn"
             ]
            },
            "/parquet_data/*"
           ]
          ]
         }
        },
        {
         "Action": "s3:ListBucket",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "balancetestdatastoragebucketD25B585E",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "balancetestdatastoragebucketD25B585E",
               "Arn"
              ]
             },
             "/private/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BalanceTest-s3LambdaTriggerPolicy"
     }
    ],
    "RoleName": "BalanceTest-S3LambdaTrigger-Role"
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-S3LambdaTrigger-Role/Resource"
   }
  },
  "BalanceTestconvertjsontoparquetandcsvF6E7C454": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-684904187051-ca-central-1",
     "S3Key": "052c26b17aef8326f5354c0ed316a7c49b5e1cd60f528f3cf4f593396d2501bc.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "BalanceTestS3LambdaTriggerRole83B886E8",
      "Arn"
     ]
    },
    "FunctionName": "BalanceTest-convert-json-to-parquet-and-csv",
    "Handler": "s3-trigger-convert-json-to-parquet-and-csv.lambda_handler",
    "Layers": [
     "arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python39:4"
    ],
    "MemorySize": 512,
    "Runtime": "python3.9",
    "Timeout": 180
   },
   "DependsOn": [
    "BalanceTestS3LambdaTriggerRole83B886E8"
   ],
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-convert-json-to-parquet-and-csv/Resource",
    "aws:asset:path": "asset.052c26b17aef8326f5354c0ed316a7c49b5e1cd60f528f3cf4f593396d2501bc",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "BalanceTestgenerateReportLambdaLogs1B9361FA": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/lambda/BalanceTest-generate-report-for-download",
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-generateReportLambda-Logs/Resource"
   }
  },
  "BalanceTestgenerateReportLambdaRole9D91E4EE": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role gives access to appropriate S3 functions needed for doing S3 Select for Lambda.",
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3FullAccess"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "BalanceTestgenerateReportLambdaLogs1B9361FA",
           "Arn"
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BalanceTest-generateReportLambdaPolicy"
     }
    ],
    "RoleName": "BalanceTest-generateReportLambda-Role"
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-generateReportLambda-Role/Resource"
   }
  },
  "BalanceTestgeneratereportfordownload0C388CF5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-684904187051-ca-central-1",
     "S3Key": "239f3b71bf3d868e6b2cab1286896d659f3f854de22562f829e3487d4407a461.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "BalanceTestgenerateReportLambdaRole9D91E4EE",
      "Arn"
     ]
    },
    "FunctionName": "BalanceTest-generate-report-for-download",
    "Handler": "generateReportForDownload.lambda_handler",
    "MemorySize": 512,
    "Runtime": "python3.7",
    "Timeout": 180
   },
   "DependsOn": [
    "BalanceTestgenerateReportLambdaRole9D91E4EE"
   ],
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-generate-report-for-download/Resource",
    "aws:asset:path": "asset.239f3b71bf3d868e6b2cab1286896d659f3f854de22562f829e3487d4407a461",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BalanceTestdeleteS3RecordLambdaLogsF37604F7": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/lambda/BalanceTest-delete-s3-record",
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-deleteS3RecordLambda-Logs/Resource"
   }
  },
  "BalanceTestdeleteS3RecordLambdaRole1BF66223": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role gives access to appropriate S3 functions needed for Lambda.",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "BalanceTestdeleteS3RecordLambdaLogsF37604F7",
           "Arn"
          ]
         }
        },
        {
         "Action": "s3:DeleteObject",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "balancetestdatastoragebucketD25B585E",
               "Arn"
              ]
             },
             "/parquet_data/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "balancetestdatastoragebucketD25B585E",
               "Arn"
              ]
             },
             "/private/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BalanceTest-deleteS3RecordLambdaPolicy"
     }
    ],
    "RoleName": "BalanceTest-deleteS3RecordLambda-Role"
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-deleteS3RecordLambda-Role/Resource"
   }
  },
  "BalanceTestdeletes3record4746C1B8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-684904187051-ca-central-1",
     "S3Key": "e61e79e05fd2211d171c99792eb6f8200803ae91ec70e46735d7f6143fbdfb43.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "BalanceTestdeleteS3RecordLambdaRole1BF66223",
      "Arn"
     ]
    },
    "FunctionName": "BalanceTest-delete-s3-record",
    "Handler": "delete-s3-record.lambda_handler",
    "MemorySize": 512,
    "Runtime": "python3.7",
    "Timeout": 180
   },
   "DependsOn": [
    "BalanceTestdeleteS3RecordLambdaRole1BF66223"
   ],
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/BalanceTest-delete-s3-record/Resource",
    "aws:asset:path": "asset.e61e79e05fd2211d171c99792eb6f8200803ae91ec70e46735d7f6143fbdfb43",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/z2PQQ6CMBBFz+K+jCIJxqWa6MaF0QOQWkYyAq1hWo1pendbUFfvzf9/M0so17CYyRdnqm6zjq7gL1aqVsSo8lyA3zrVohW7m/7ahK1kDKKT/bWW4GN7wqEnZjJa7J1WNkmMfx63pmHwR9McBuMeqft5ECR78GfTYYpHnkxH6p3OyYLgopLMaBk2CWGcIhs3KBR/Gbv4QkO6CUKbGuHO82deQr6CfHZnomxw2lKPcJ74AdbOpOoFAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "DataWorkflowStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "ExportsOutputFnGetAttbalancetestdatastoragebucketD25B585EArnFFCC6A0F": {
   "Value": {
    "Fn::GetAtt": [
     "balancetestdatastoragebucketD25B585E",
     "Arn"
    ]
   },
   "Export": {
    "Name": "DataWorkflowStack:ExportsOutputFnGetAttbalancetestdatastoragebucketD25B585EArnFFCC6A0F"
   }
  },
  "ExportsOutputRefbalancetestdatastoragebucketD25B585E3C53CCB4": {
   "Value": {
    "Ref": "balancetestdatastoragebucketD25B585E"
   },
   "Export": {
    "Name": "DataWorkflowStack:ExportsOutputRefbalancetestdatastoragebucketD25B585E3C53CCB4"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}